<?xml version="1.0" encoding="UTF-8" ?>

<project name="NextEuropa" default="help">

    <!-- Patterns matching files that are not strictly necessary at runtime. -->
    <!-- .txt files that just make it easier to guess which version we are running -->
    <patternset id="cleanables-txtfiles">
        <include name="**/LICENSE.txt" />
        <include name="**/CHANGELOG.txt" />
        <include name="**/COPYRIGHT.txt" />
        <include name="**/INSTALL.*" />
        <include name="**/UPGRADE.txt" />
        <include name="**/README.txt" />
        <include name="**/MAINTAINERS.txt" />
    </patternset>
    <!-- Patches (also avoidable through drush make's no-patch-txt option). -->
    <patternset id="cleanables-patches">
        <include name="**/PATCHES.txt" />
        <include name="**/*.patch" />
    </patternset>
    <!-- Development stuff. -->
    <patternset id="cleanables-devel">
        <include name="scripts/**" />
        <include name="**/.gitignore" />
    </patternset>
    <!-- Composer files. -->
    <patternset id="cleanables-composer">
        <include name="**/composer.json" />
        <include name="**/composer.lock" />
    </patternset>
    <!-- Examples. -->
    <patternset id="cleanables-examples">
        <include name="sites/example.sites.php" />
        <include name="profiles/*/libraries/*/examples/**" />
        <include name="profiles/*/libraries/*/demo/**" />
    </patternset>
    <!-- Tools and utilities. -->
    <patternset id="cleanables-tools">
        <include name="profiles/*/libraries/*/utils/**" />
        <include name="profiles/*/libraries/*/tools/**" />
    </patternset>
    <!-- Some interesting PHP files. -->
    <patternset id="cleanables-php">
        <include name="update.php" />
        <include name="sites/*settings*.php" />
        <include name="sites/default/*settings*.php" />
        <exclude name="sites/default/default.settings.php" />
    </patternset>
    <!-- Top "vendor" directory. -->
    <patternset id="cleanables-vendor">
        <include name="vendor/**" />
    </patternset>
    <!-- HTTP server configuration files. -->
    <patternset id="cleanables-webserver">
        <include name="**/.htaccess" />
        <include name="**/web.config" />
    </patternset>

    <!-- Delete the previous build. -->
    <target name="delete-platform">
        <!--
            During the Drupal installation process the settings folder is write
            protected. Ensure it is writeable so it can be removed.
         -->
        <if>
            <available file="${platform.build.settings.dir}" type="dir" />
            <then>
                <chmod mode="0777" failonerror="false" verbose="false" quiet="true">
                    <fileset dir="${platform.build.settings.dir}" />
                </chmod>
            </then>
        </if>

        <echo msg="Delete previous build." />
        <delete dir="${phing.project.build.dir}" includeemptydirs="true" failonerror="false" />
    </target>

    <!-- Make Drupal core. -->
    <target name="make-drupal-core">
        <!--
            Drupal core is created in a separate target because Drush make only
            allows to build in a pre-existing folder if the 'no-core' option is
            set.
        -->
        <echo msg="Make Drupal core." />
        <drush
            command="make"
            assume="yes"
            bin="${drush.bin}"
            pipe="yes"
            verbose="${drush.verbose}"
            root="${platform.build.dir}">
            <param>${drupal.make}</param>
            <param>${platform.build.dir}</param>
            <option name="no-patch-txt"></option>
        </drush>
    </target>

    <!-- Make the platform. -->
    <target name="make-platform">
        <echo msg="Make the platform." />
        <drush
            command="make"
            assume="yes"
            bin="${drush.bin}"
            pipe="yes"
            verbose="${drush.verbose}"
            root="${platform.build.dir}">
            <param>${platform.make}</param>
            <param>${platform.build.dir}</param>
            <!-- Increasing the concurrency improves the build time by a factor of 3. -->
            <option name="concurrency">10</option>
            <option name="no-patch-txt"></option>
            <!-- This option will allow us to build inside an existing folder. -->
            <option name="no-core"></option>
            <!-- Install all contributed projects inside the chosen profile. -->
            <option name="contrib-destination">profiles/${platform.profile.name}</option>
        </drush>
    </target>

    <!-- Make one of the profiles in order to build a multisite platform. -->
    <target name="make-multisite-platform">
        <!-- Override the location of the make file. -->
        <property name="platform.make" value="${platform.resources.profiles.dir}/${platform.profile.name}/build.make" override="yes" />
        <phingcall target="make-platform" />
    </target>

    <!--
        Clean up core profiles which might be present inside the symlinked
        profiles folder.
    -->
    <target name="clean-platform-profiles">
        <delete dir="${platform.resources.profiles.dir}/minimal" />
        <delete dir="${platform.resources.profiles.dir}/standard" />
        <delete dir="${platform.resources.profiles.dir}/testing" />
    </target>

    <!-- Symlink the profile folders for easy development. -->
    <target name="link-platform-profiles">
        <!-- Make a backup of the core profiles folder. -->
        <move file="${platform.build.profiles.dir}" todir="${phing.project.tmp.dir}" />
        <!-- Symlink our profiles folder. -->
        <symlink link="${platform.build.profiles.dir}" target="${platform.resources.profiles.dir}" />
        <!-- Restore the core profiles. -->
        <move file="${phing.project.tmp.dir}/profiles/minimal" todir="${platform.build.profiles.dir}" />
        <move file="${phing.project.tmp.dir}/profiles/standard" todir="${platform.build.profiles.dir}" />
        <move file="${phing.project.tmp.dir}/profiles/testing" todir="${platform.build.profiles.dir}" />
    </target>

    <!-- Copy the profile folders for deploying on production. -->
    <target name="copy-platform-profiles">
        <!-- Make a backup of the core profiles folder. -->
        <move file="${platform.build.profiles.dir}" todir="${phing.project.tmp.dir}" />
        <!-- Copy our profiles folder. -->
        <copy todir="${platform.build.profiles.dir}">
            <fileset dir="${platform.resources.profiles.dir}">
                <include name="**"></include>
            </fileset>
        </copy>
        <!-- Restore the core profiles. -->
        <move file="${phing.project.tmp.dir}/profiles/minimal" todir="${platform.build.profiles.dir}" />
        <move file="${phing.project.tmp.dir}/profiles/standard" todir="${platform.build.profiles.dir}" />
        <move file="${phing.project.tmp.dir}/profiles/testing" todir="${platform.build.profiles.dir}" />
    </target>

    <!-- Symlink various resources for easy development. -->
    <target name="link-platform-resources">
        <!-- Composer configuration. -->
        <symlink link="${platform.build.composer.json}" target="${platform.resources.composer.json}" />
        <symlink link="${platform.build.composer.lock}" target="${platform.resources.composer.lock}" />
    </target>

    <!-- Copy various resources for deploying on production. -->
    <target name="copy-platform-resources">
        <!-- Resources to copy to the website root. -->
        <copy todir="${platform.build.dir}">
            <fileset dir="${platform.resources.dir}">
                <!-- Composer configuration. -->
                <include name="composer.*"></include>
            </fileset>
        </copy>
    </target>

    <!-- Install Composer dependencies. -->
    <target name="install-platform-dependencies">
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${platform.build.dir}" />
            <arg value="--no-dev" />
        </composer>
    </target>

    <!-- Install Composer dependencies, including optional development dependencies. -->
    <target name="install-platform-dev-dependencies">
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${platform.build.dir}" />
        </composer>
    </target>

    <target
        name="build-platform-dev"
        description="Build a local development version of the platform."
        depends="delete-platform, make-drupal-core, clean-platform-profiles, link-platform-profiles, make-platform, link-platform-resources, install-platform-dev-dependencies" />

    <target
        name="build-platform-dist"
        description="Build a version of the platform intended to distribute as a release package."
        depends="delete-platform, make-drupal-core, clean-platform-profiles, copy-platform-profiles, make-platform, copy-platform-resources, install-platform-dependencies" />

    <target
        name="build-platform-dist-clean"
        description="Build a minimalistic version of the platform for deployment purposes."
        depends="build-platform-dist">
        <if>
            <istrue value="${platform.clean}" />
            <then>
                <foreach list="${platform.clean}" param="cleanset" target="build-platform-dist-clean-subtask" />
                <!-- We do not want to enforce a particular mode, we just want to remove execution bits. -->
                <exec os="Linux" command="find ${phing.project.build.dir} -type f -perm /0111 -print0 | xargs --no-run-if-empty --null chmod ugo-x" />
            </then>
        </if>

        <if>
            <istrue value="${platform.store-commit}" />
            <then>
                <!-- Note the Git commit used to generate the build in a .commit file. -->
                <gitlog
                    gitPath="${git.bin}"
                    repository="${platform.basedir}"
                    outputProperty="platform.git.head"
                    format="format:%H"
                    maxCount="1"
                />
                <dirname property="platform.store-commit.basepath" file="${phing.project.build.dir}/${platform.store-commit.path}" />
                <mkdir dir="${platform.store-commit.basepath}" />
                <append destFile="${phing.project.build.dir}/${platform.store-commit.path}" text="${platform.git.head}" />
            </then>
        </if>
    </target>
    <target name="build-platform-dist-clean-subtask">
        <echo msg="Remove &quot;${cleanset}&quot; files from the platform build:" />
        <delete includeemptydirs="true">
            <fileset dir="${phing.project.build.dir}" defaultexcludes="false">
                <patternset refid="cleanables-${cleanset}" />
            </fileset>
        </delete>
    </target>

    <target
        name="build-multisite-dist"
        description="Build a multisite version of the platform intended to distribute as a release package."
        depends="delete-platform, make-drupal-core, clean-platform-profiles, copy-platform-profiles">

        <!-- First make the standard profile. -->
        <property name="platform.profile.name" value="multisite_drupal_standard" override="yes" />
        <phingcall target="make-multisite-platform" />

        <!-- Then make the communities profile. -->
        <property name="platform.profile.name" value="multisite_drupal_communities" override="yes" />
        <phingcall target="make-multisite-platform" />

        <!-- Call the remaining build targets. -->
        <phingcall target="copy-platform-resources" />
        <phingcall target="install-platform-dependencies" />

    </target>

</project>
