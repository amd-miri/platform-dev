<?php

/**
 * @file
 * This file contains the newsroom blocks and feeds alter hooks
 */
define('NEWSROOM_TYPE_VOCABULARY', 'newsroom_item_type');
define('NEWSROOM_TOPIC_VOCABULARY', 'newsroom_topic');
define('NEWSROOM_TOPIC_OPERATOR_OR', 'OR');
define('NEWSROOM_CALENDAR_BLOCK', 'calendar');
define('NEWSROOM_URL', 'http://ec.europa.eu/information_society/newsroom/cf/');

global $_newsroom_universe_url;

/**
 * Implements hook_init().
 */
function newsroom_init() {
  if ($universe_id = variable_get('newsroom_universe_id', FALSE)) {
    global $_newsroom_universe_url;
    $_newsroom_universe_url = NEWSROOM_URL . $universe_id . '/';
  }
  else {
    $newsroom_config_path = url('admin/config/content/newsroom');
    $newsroom_config_path = filter_xss($newsroom_config_path);
    drupal_set_message(t('The Newsroom feature needs to be configured before use. Please visit the <a href="!link">configuration page</a>!', array('!link' => $newsroom_config_path)), 'warning', FALSE);
  }
}

/**
 * Implements hook_feeds_plugins().
 */
function newsroom_feeds_plugins() {
  $info = array();
  // A plugin needs to derive either directly or indirectly from FeedsFetcher,
  // FeedsParser or FeedsProcessor.
  $info['NewsroomDeleteNodeProcessor'] = array(
    'name' => 'Newsroom Infso Outdated Items',
    'description' => 'Deletes outdated items by tracking a specific RSS feed.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'NewsroomDeleteNodeProcessor',
      'file' => 'NewsroomDeleteNodeProcessor.inc',
      'path' => drupal_get_path('module', 'newsroom') . '/plugins',
    ),
  );
  // A plugin needs to derive either directly or indirectly from FeedsFetcher,
  // FeedsParser or FeedsProcessor.
  $info['NewsroomFeedsNodeProcessor'] = array(
    'name' => 'Newsroom node processor',
    'description' => 'Create and update newsroom items (also across multiple importer instances without duplicated items)',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'NewsroomFeedsNodeProcessor',
      'file' => 'NewsroomFeedsNodeProcessor.inc',
      'path' => drupal_get_path('module', 'newsroom') . '/plugins',
    ),
  );
  return $info;
}

/**
 * Implements hook_feeds_after_parse().
 */
function newsroom_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  if ($source->id == 'newsroom_items') {
    foreach ($result->items as $id => &$item) {
      newsroom_newsroom_mapping($item);
    }
  }
  if ($source->id == 'newsroom_services') {
    foreach ($result->items as $id => &$item) {
      newsroom_newsroom_services_mapping($item);
    }
  }

  if ($source->id == 'newsroom_type') {
    foreach ($result->items as $id => &$item) {
      newsroom_newsroom_types_mapping($item);
    }
  }
  if ($source->id == 'newsroom_topics') {
    foreach ($result->items as $id => &$item) {
      newsroom_newsroom_topics_mapping($item);
    }
  }
}

/**
 * Alter the mapping for each items.
 *
 * @param array $item
 *   Item entity
 */
function newsroom_newsroom_mapping(&$item) {
  debug($item, 'Feeds');
  // If no end date specified , provide the start date to prevent.
  // Feeds to use now() as the end date.
  if (!isset($item['xpathparser:9'])) {
    $item['xpathparser:9'] = $item['xpathparser:8'];
  }
  if (isset($item['xpathparser:46']) && empty($item['xpathparser:46'])) {
    $item['xpathparser:46'] = $item['xpathparser:45'];
  }
  // Resolve the mapping for the original newsroom_type name;
  // If no mapping provided, keep the original name.
  newsroom_newsroom_mapping_xpath($item, 'field_newsroom_type_id', 'xpathparser:18', TRUE);
  newsroom_newsroom_mapping_xpath($item, 'field_newsroom_topic_id', 'xpathparser:33', TRUE);
  newsroom_newsroom_mapping_xpath($item, 'field_newsroom_topic_id', 'xpathparser:34', TRUE);
  newsroom_newsroom_mapping_xpath($item, 'field_newsroom_topic_id', 'xpathparser:36', TRUE);
  newsroom_newsroom_mapping_xpath($item, 'field_newsroom_topic_id', 'xpathparser:41', TRUE);
  // Allow numbers in tags by adding spaces around them:
  // http://drupal.org/node/1283628.
  // newsroom_tags_space($item);
}

/**
 * Alter the mapping for each items.
 *
 * @param array $item
 *   Item entity
 */
function newsroom_newsroom_services_mapping(&$item) {
  // Resolve the mapping for the chapters.
  // If the Chapter ID doesn't map, leave it empty.
  newsroom_newsroom_mapping_xpath($item, 'field_newsroom_topic_id', 'xpathparser:3');
}

/**
 * Alter the mapping for each items.
 *
 * @param array $item
 *   Item array
 */
function newsroom_newsroom_types_mapping(&$item) {

  if (!isset($item['xpathparser:4'])) {
    // Set parent to '0' if no match.
    $item['xpathparser:4'] = 0;
  }
  debug($item, 'newsroom_newsroom_types_mapping', TRUE);
}

/**
 * Alter the mapping for each items.
 *
 * @param array $item
 *   Item array
 */
function newsroom_newsroom_topics_mapping(&$item) {
  if (!isset($item['xpathparser:4'])) {
    // Set parent to '0' if no match.
    $item['xpathparser:4'] = 0;
  }
}

/**
 * Trigger a mapping only. If the corresponding xpath return some information.
 *
 * @param array $item
 *   Corresponding item to alter
 * @param string $field_name
 *   the field name to use to resolve the mapping to the current term id
 * @param string $item_xpath
 *   the xpath for the original newsroom id of this object
 * @param bool $reset
 *   if set to TRUE, will return an empty string if no mapping found
 */
function newsroom_newsroom_mapping_xpath(&$item, $field_name, $item_xpath, $reset = TRUE) {
  if (isset($item[$item_xpath])) {
    $newsroom_import_name = $item[$item_xpath];
    $item[$item_xpath] = newsroom_technical_fields_to_tid($field_name, $newsroom_import_name, $reset);
  }
}

/**
 * Forces the import as a string and not the match with term id.
 *
 * @param array $item
 *   Item array
 */
function newsroom_tags_space(&$item) {
  if (isset($item['xpathparser:20'])) {
    if (is_string($item['xpathparser:20']) && is_numeric($item['xpathparser:20'])) {
      $item['xpathparser:20'] = ' ' . $item['xpathparser:20'] . ' ';
    }
    elseif (is_array($item['xpathparser:20'])) {
      foreach ($item['xpathparser:20'] as $key => $value) {
        if (is_numeric($value)) {
          $item['xpathparser:20'][$key] = ' ' . $value . ' ';
        }
      }
    }
  }
}

/**
 * Try to resolve each taxonomy term with a corresponding ID to map.
 *
 * @param string $field_name
 *   The mapping field
 * @param string $field_value
 *   The mapping field value
 * @param bool $reset
 *   If set to TRUE, will return an empty string if no mapping found
 *
 * @return array
 *   Taxonomy ids
 */
function newsroom_technical_fields_to_tid($field_name, $field_value, $reset = TRUE) {
  // Let's initiate term_ids to field value, in case we can't map it.
  $term_ids = $reset ? '' : $field_value;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
      ->fieldCondition($field_name, 'value', $field_value)
      ->execute();
  $result = $query->execute();
  if (isset($result['taxonomy_term'])) {
    $term_ids = array_keys($result['taxonomy_term']);
  }
  return $term_ids;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function newsroom_block_info() {
  $blocks = array();
  $blocks['newsroom_topic_summary'] = array(
    'info' => t('Newsroom Topic Summary'),
  );
  $blocks['newsroom_admin_tools'] = array(
    'info' => t('Newsroom administration buttons'),
  );
  $blocks['newsroom_newsletter_subscription'] = array(
    'info' => t('Newsroom Newsletter Subscription'),
  );
  $blocks['newsroom_list_filter'] = array(
    'info' => t('Newsroom List Filter'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function newsroom_block_view($delta = '') {
  switch ($delta) {
    case 'newsroom_topic_summary':
      $block['subject'] = newsroom_subject($delta);
      $block['content'] = newsroom_contents($delta);
      break;

    case 'newsroom_admin_tools':
      $block['subject'] = NULL;
      $block['content'] = newsroom_admin_tools();
      break;

    case 'newsroom_newsletter_subscription':
      $block['subject'] = NULL;
      $block['content'] = newsroom_newsletter_subscription();
      break;

    case 'newsroom_list_filter':
      $block['subject'] = NULL;
      $block['content'] = newsroom_list_filter();
      break;
  }
  return $block;
}

/**
 * Newsletter subscription block.
 */
function newsroom_newsletter_subscription() {
  $content = array();
  $view = views_get_view('newsletter_subscription');

  if ($view) {
    $view->set_display('block');
    $view->pre_execute();
    $view->execute();

    if (!empty($view->result)) {
      $service = array_shift($view->result);
      
      $content = drupal_get_form('newsroom_newsletter_subscription_form', array('tid' => $service->field_field_newsroom_service_id[0]['raw']['safe_value'], 'name' => $service->taxonomy_term_data_name));
    }
  }

  return $content;
}

/**
 * Newsletter subscription form.
 */
function newsroom_newsletter_subscription_form($form, &$form_state) {
  global $_newsroom_universe_url;
  $args = $form_state['build_info']['args'][0];
  $form = array();
  $form['#prefix'] = '<div class="CTAnewsletter">';
  $form['#suffix'] = '</div>';
  $form['#token'] = FALSE;
  $form['#action'] = $_newsroom_universe_url . 'subscription-quick-generic.cfm';
  $form['intro'] = array(
    '#markup' => '<div class="title">' . $args['name'] . '</div>',
  );
  $form['email'] = array(
    '#prefix' => '<div class="inputMail">',
    '#suffix' => '</div>',
    '#type' => 'textfield',
    '#attributes' => array(
      'placeholder' => t('Your e-mail'),
      'class' => array(),
    ),
  );
  $form['submit'] = array(
    '#prefix' => '<div class="inputSubscribe">',
    '#suffix' => '</div>',
    '#type' => 'submit',
    '#value' => t('Subscribe'),
  );
  $form['service_id'] = array(
    '#type' => 'hidden',
    '#value' => $args['tid'],
  );
  $form['previous'] = array(
    '#markup' => '<div class="linkPreviousIssues"><a href="' . $_newsroom_universe_url . 'newsletter-specific-archive.cfm?serviceId=' . $args['tid'] . '">' . t('Previous issues') . '</a></div>',
  );
  return $form;
}

/**
 * Returns the newsroom list filter form.
 */
function newsroom_list_filter() {
  $topics_vocanulary = taxonomy_vocabulary_machine_name_load(NEWSROOM_TOPIC_VOCABULARY);

  // Load all relevant nids by loading the same view without pager.
  $menu_object = menu_get_item();
  if ($menu_object['page_callback'] == 'views_page' && !empty($menu_object['page_arguments']) && $menu_object['page_arguments'][0] == 'newsroom') {
    $nids = array();
    $arguments = $menu_object['theme_arguments'];
    $fields = array(
      'nid' => array(
        'id' => 'nid',
        'table' => 'node',
        'field' => 'nid',
        'label' => '',
        'exlude' => TRUE,
        'element_label_colon' => FALSE,
      ),
    );
    $view = views_get_view('newsroom');
    $view->set_display($menu_object['page_arguments'][1]);
    $view->set_arguments($arguments);
    $view->display[$view->current_display]->handler->set_option('fields', $fields);
    $view->display[$view->current_display]->handler->set_option('pager', array('type' => 'none', 'options' => array()));
    $view->pre_execute();
    $view->execute();

    foreach ($view->result as $node) {
      $nids[] = $node->nid;
    }

    $query = db_select('taxonomy_index', 'ti');
    $query->fields('ti', array('tid'));
    $query->join('taxonomy_term_data', 't', 't.tid = ti.tid');
    $query->fields('t', array('name'));
    $query->join('field_data_field_newsroom_category_domain', 'd', 'd.entity_id = ti.tid');
    $query->fields('d', array('field_newsroom_category_domain_value'));
    $query->condition('t.vid', $topics_vocanulary->vid);
    if (!empty($nids)) {
      $query->condition('ti.nid', $nids);
    }
    $query->condition('d.entity_type', 'taxonomy_term');
    $result = $query->execute();

    $countries = array();
    $topics = array();
    while ($record = $result->fetchAssoc()) {
      if ($record['field_newsroom_category_domain_value'] == 'Country') {
        $countries[$record['tid']] = $record['name'];
      }
      else {
        $topics[$record['tid']] = $record['name'];
      }
    }

    // Load full otpion list based on field_newsroom_topics values.
    $field_instance = field_info_instance('node', 'field_newsroom_topics', 'newsroom_item');
    $field = field_info_field('field_newsroom_topics');
    $temp = new stdClass();
    $temp->type = 'newsroom_item';
    node_object_prepare($temp);
    $options = taxonomy_options_list($field, $field_instance, 'node', $temp);

    // Reduce options to existing values only.
    $countries = array_intersect_key($options, $countries);
    $topics = array_intersect_key($options, $topics);
    // Change values from tid keys term name based.
    if (variable_get('newsroom_url_mode', 'name') == 'name') {
      $countries = _newsroom_options_tid_to_name($countries);
      $topics = _newsroom_options_tid_to_name($topics);
    }
    // Add - None - option.
    $none = array('0' => t('- None -'));
    $countries = $none + $countries;
    $topics = $none + $topics;

    return drupal_get_form('newsroom_list_filter_form', $countries, $topics, $arguments);
  }

  return '';
}

/**
 * Newsroom filter form.
 */
function newsroom_list_filter_form($form, &$form_state) {
  $arguments = $form_state['build_info']['args'];
  $form = array();
  if (!empty($arguments[0])) {
    // Selected country.
    $selected_country = !empty($arguments[2]) && !empty($arguments[2][1]) ? $arguments[2][1] : 0;
    $countries = $arguments[0];

    if ($selected_country !== 0) {
      $form['countries'] = array(
        '#title' => t('Filter by country'),
        '#type' => 'hidden',
        '#default_value' => '0',
      );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Reset filter'),
        '#weight' => 10,
      );
    }
    else {
      $form['countries'] = array(
        '#title' => t('Filter by country'),
        '#type' => 'select',
        '#options' => $countries,
        '#default_value' => $selected_country,
      );
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Go'),
        '#weight' => 10,
      );
    }
  }

  if (!empty($form)) {
    $form['#submit'] = array('newsroom_list_filter_submit');
  }

  return $form;
}

/**
 * Submit handler for filter form.
 */
function newsroom_list_filter_submit(&$form, &$form_state) {
  $path = 'newsroom/';
  $arguments = $form_state['build_info']['args'];
  $target_country = $form_state['values']['countries'] == '0' ? '' : $form_state['values']['countries'];

  if (!empty($arguments[2]) && !empty($arguments[2][0])) {
    $path .= $arguments[2][0] . '/' . $target_country;
  }
  else {
    $path .= 'all/' . $target_country;
  }

  drupal_goto($path);
}

/**
 * Returns block content.
 *
 * Buttons to easily manage newsroom items. Edit in newsroom, re-import etc.
 *
 * @return string
 *   Content
 */
function newsroom_admin_tools() {
  $content = '';
  $newsroom_item = menu_get_object();
  if ($newsroom_item->type == 'newsroom_item') {
    $newsroom_id_field = field_get_items('node', $newsroom_item, 'field_newsroom_item_id');
    $newsroom_id = $newsroom_id_field[0]['value'];
    $links = array();
    if (user_access('edit remote newsroom item')) {
      global $_newsroom_universe_url;
      $links['edit'] = array(
        'text' => '<span class="glyphicon glyphicon-edit"></span> Edit item in the Newsroom',
        'path' => $_newsroom_universe_url . 'item.cfm?item_id=' . $newsroom_id,
        'options' => array(
          'html' => TRUE,
          'attributes' => array('class' => 'btn btn-success'),
        ),
      );
    }
    if (user_access('import newsroom feeds')) {
      $links['reimport'] = array(
        'text' => '<span class="glyphicon glyphicon-refresh"></span> Re-import from the Newsroom',
        'path' => 'news-import/' . $newsroom_id . '/reimport',
        'options' => array(
          'html' => TRUE,
          'attributes' => array('class' => 'btn btn-danger'),
        ),
      );
    }

    foreach ($links as $link) {
      $content .= '<div class="btn-group-sm btn-group">' . theme('link', $link) . '</div>';
    }
    
    if (!empty($content)) {
      $content = '<div class="btn-toolbar">' . $content . '</div>';
    }
  }
  return $content;
}

/**
 * Returns a block content.
 *
 * Loops through newsroom type at top level and display the corresponding
 * content and link for each newsroom type.
 *
 * @param int $delta
 *   The order
 *
 * @return string
 *   Content
 */
function newsroom_contents($delta) {
  $block_settings = _newsroom_get_summary_block_tid();
  if (!$block_settings['display']) {
    return '';
  }
  
  $topic_tids = array('all');
  $topic_name = array();
  // Sticky items (Centrally published).
  $sticky = TRUE;
  if (!drupal_is_front_page()) {    
    $sticky = FALSE;
    if (!empty($block_settings['topic'])) {
      foreach ($block_settings['topic'] as $topic) {
        $topic_tids[] = $topic->tid;
        $topic_name[] = $topic->name;
      }
    }
  }
  
  $newsroom_content = newsroom_content($block_settings['type'], FALSE, implode('+', $topic_tids), $sticky, $block_settings['topic'], $block_settings['topic_operator']);

  // Prepend RSS link if there is content.
  if (!empty($newsroom_content)) {
    $newsroom_content = _newsroom_build_rss_link($topic_tids, $topic_name) . $newsroom_content;
  }

  return $newsroom_content;
}

function _newsroom_build_rss_link($topic_tids, $topic_name) {
  $rss_path = 'newsroom/all/' . implode('+', $topic_tids) . '/feed';
  $rss_title = count($topic_name) > 0 ? 'RSS feed : ' . implode(', ', $topic_name) : 'RSS feed';
  $rss = '<div class="newsroom_rss">';
  $rss .= theme('feed_icon', array(
    'url' => $rss_path,
    'title' => $rss_title,
  ));
  $rss .= l($rss_title, $rss_path);
  $rss .= '</div>';
  
  return $rss;
}

/**
 * Calculates the tid to use to filter the newsroom_topic_summary block content.
 *
 * @return array
 *   NR Topic tid
 */
function _newsroom_get_summary_block_tid() {

  $current_path = menu_get_item();
  $topic_operator = NEWSROOM_TOPIC_OPERATOR_OR;
  $selected_topics = array();
  $selected_topic_highlights = array();
  $selected_types = array();
  $config['display'] = FALSE;
  $newsroom_selection_node = FALSE;

  // We are on a view object, it's a term argument,
  // let's use to filter results.
  if ($current_path['page_callback'] === 'views_page' && $current_path['path'] === 'taxonomy/term/%') {
    $argument_values = array_values($current_path['page_arguments']);
    $last_argument_element = end($argument_values);
    // We may have a term page, let's try to load it,
    if (is_numeric($last_argument_element)) {
      $entity = taxonomy_term_load($last_argument_element);
      $selected_topics[] = $entity->tid;
    }
  }
  elseif ($current_path['page_callback'] === 'node_page_view') {
    // It is a node page take node entity from request.
    $entity = $current_path['map'][1];

    // If newsroom selection type, load same entity as selection.
    $newsroom_selection_node = $entity->type == 'newsroom_selection' ? $entity : FALSE;
  }
  elseif (isset($current_path['page_arguments'][0]->tid)) {
    // It's taxonomy term without views.
    $entity = $current_path['page_arguments'][0];
    $selected_topics[] = $entity->tid;
  }

  // Check if selection config is set.
  if (isset($entity->field_associated_newsroom_select) && !empty($entity->field_associated_newsroom_select)) {
    // If it has the selection field, try to load config.
    $newsroom_selection_node = node_load($entity->field_associated_newsroom_select['und'][0]['target_id']);
  }

  if ($newsroom_selection_node) {
    
    if (!empty($newsroom_selection_node->field_newsroom_topic_operator)) {
      $topic_operator = $newsroom_selection_node->field_newsroom_topic_operator['und'][0]['value'];
    }      
      
    //$topic_operator = 
    $topic_config = field_get_items('node', $newsroom_selection_node, 'field_selected_topics');
    $selected_topics = array();
    if ($topic_config) {
      foreach ($topic_config as $term_ref) {
        $selected_topics[] = $term_ref['target_id'];
      }
    }

    // Anywhere else in the script.
    $topic_highlight_config = field_get_items('node', $newsroom_selection_node, 'field_selected_topic_highlights');

    $selected_topic_highlights = array();
    if ($topic_highlight_config) {
      foreach ($topic_highlight_config as $term_ref) {
        $selected_topic_highlights[] = $term_ref['target_id'];
      }
    }
    $blocks_by = variable_get('newsroom_block_by', 'type');
    $grouping_field = $blocks_by == 'collection' ? 'field_selected_categories' : 'field_selected_types';
    $key = $blocks_by == 'collection' ? 'target_id' : 'tid';
    $type_config = field_get_items('node', $newsroom_selection_node, $grouping_field);

    if ($type_config) {
      foreach ($type_config as $term_ref) {
        $selected_types[] = $term_ref[$key];
      }
    }
    $config['display'] = TRUE;
  }
  elseif (isset($entity->field_associated_newsroom_topic) && !empty($entity->field_associated_newsroom_topic)) {
    // If it has the associated field, try to load topic.
    $selected_topics = array($entity->field_associated_newsroom_topic['und'][0]['tid']);
    $config['display'] = TRUE;
  }

  $config['topic'] = taxonomy_term_load_multiple($selected_topics);
  $config['topic_operator'] = $topic_operator;
  $config['topic_highlights'] = taxonomy_term_load_multiple($selected_topic_highlights);
  $config['type'] = newsroom_get_grouping_terms($selected_types);

  return $config;
}

/**
 * Item types or Collection to group by.
 *
 * @return array
 *   Terms
 */
function newsroom_get_grouping_terms($selected) {
  $terms = &drupal_static(__FUNCTION__);

  if (!isset($terms)) {
    // Get cached terms if exists.
    if ($cache = cache_get('newsroom:grouping_terms')) {
      $terms = $cache->data;
    }
    else {
      $blocks_by = variable_get('newsroom_block_by', 'type');
      if ($blocks_by !== 'collection') {
        // We'll loop through the newsroom by type vocabulary.
        $newsroom_type_vocabulary = taxonomy_vocabulary_machine_name_load(NEWSROOM_TYPE_VOCABULARY);
        $terms = array();
        if (is_object($newsroom_type_vocabulary) && $newsroom_type_vocabulary !== FALSE) {
          $terms = taxonomy_get_tree($newsroom_type_vocabulary->vid, 0, 1, 1);
        }
        // Filter types if needed.
        if (!empty($selected)) {
          foreach ($terms as $key => $type) {
            if (!in_array($type->tid, $selected)) {
              unset($terms[$key]);
            }
          }
        }
      }
      else {
        if (!empty($selected)) {
          $terms = taxonomy_term_load_multiple($selected);
        }
        else {

          $view = views_get_view('newsroom_term_selection');
          $view->set_display('entityreference_3');
          $view->pre_execute();
          $view->execute();

          $term_items = $view->result;
          $terms = array();

          foreach ($term_items as &$term_item) {
            $term = taxonomy_term_load($term_item->tid);
            if ($term) {
              $terms[] = $term;
            }
          }
        }
      }
      cache_set('newsroom:grouping_terms', $terms, 'cache_newsroom', time() + 360);
    }
  }

  return $terms;
}

/**
 * Call to the content view, set up the argument vocabulary by vocabulary.
 *
 * @param array $newsroom_grouping_terms
 *   Newroom type terms
 * @param bool $full_display
 *   Show full display
 * @param int $newsroom_topic_tids
 *   Main tid
 * @param bool $sticky
 *   Centrally published
 *
 * @return string
 *   Content
 */
function newsroom_content($newsroom_grouping_terms, $full_display = FALSE, $newsroom_topic_tids = 'all', $sticky = NULL, $topics = array(), $topic_operator = NEWSROOM_TOPIC_OPERATOR_OR) {
  module_load_include('inc', 'pathauto', 'pathauto');
  $blocks_by = variable_get('newsroom_block_by', 'type');
  $newsroom_boxes = array();

  // Custom Agenda block if needed.
  if (variable_get('newsroom_display_agenda', 1) && $agenda_types = newsroom_agenda_types()) {
    $view_arguments[0] = implode('+', array_keys($agenda_types));
    $view_arguments[1] = $newsroom_topic_tids;
    $agenda_box = newsroom_fetch_content_view($view_arguments, NEWSROOM_CALENDAR_BLOCK, 'agenda', $sticky, $full_display, $topic_operator);

    if ($agenda_box && $agenda_box['block']['content'] != '') {
      $full_list_url = 'newsroom/calendar';
      $newsroom_boxes[] = array_merge($agenda_box, array(
        'title' => l(t('Calendar'), $full_list_url),
        'list_link' => l(t('<span class="more">%1</span>', array('%1' => t('More ongoing activities'))), $full_list_url, array('html' => TRUE)),
        'classes' => array('agenda', 'highlighted'),
        'highlight' => TRUE,
        'agenda' => TRUE,
        'weight' => '0',
      ));
    }
  }

  if (count($newsroom_grouping_terms) > 0) {
    foreach ($newsroom_grouping_terms as $newsroom_grouping_term) {
      $default_view_display = 'default_newsroom';
      $classes = array('term-' . $newsroom_grouping_term->tid);

      if ($blocks_by !== 'collection') {
        $newsroom_type_tids = newsroom_get_children($newsroom_grouping_term->tid, $newsroom_grouping_term->vid);
        $view_arguments[0] = $newsroom_type_tids;
        $view_arguments[1] = $newsroom_topic_tids;
        $newsroom_type_display = field_get_items('taxonomy_term', $newsroom_grouping_term, 'field_newsroom_type');

        // Some newsroom type are not using the normal sorting.
        // This is machine-name defined by newsroom type.
        if ($newsroom_type_display) {
          switch ($newsroom_type_display[0]['value']) {
            case 'events':
              $default_view_display = 'events';
              break;

            case 'agenda':
              $default_view_display = 'agenda';
              break;

            case 'consultation_funding':
              $default_view_display = 'consultation_funding';
              break;
          }
        }
      }
      else {
        $view_arguments[0] = $newsroom_grouping_term->tid;
        $view_arguments[1] = $newsroom_topic_tids;
      }

      $newsroom_view_exec = newsroom_fetch_content_view($view_arguments, $newsroom_grouping_term, $default_view_display, $sticky, $full_display, $topic_operator);
      // If we have some content, let's add a title.
      if ($newsroom_view_exec && $newsroom_view_exec['block']['content'] != '') {
        $topic_is_highlighted = _newsroom_type_is_highlighted($newsroom_grouping_term);
        if ($topic_is_highlighted) {
          // Controls width.
          $classes[] = 'featured';
          // Controls border;
          $classes[] = 'highlighted';
        }

        $clean_url_type_name = pathauto_cleanstring($newsroom_grouping_term->name);
        if (count($topics) == 1) {
          $topics_segment = pathauto_cleanstring($topics[key($topics)]->name);
        }
        else {
          $topics_segment = $newsroom_topic_tids;
        }
        $newsroom_url_mode = variable_get('newsroom_url_mode', 'name');
        if ($newsroom_url_mode == 'tid') {
          $full_list_url = 'newsroom/' . $newsroom_grouping_term->tid . '/' . $topics[key($topics)]->tid;
        }
        else {
          $full_list_url = 'newsroom/' . $clean_url_type_name . '/' . $topics_segment;
        }

        // Check latest item in box.
        $created = 0;
        foreach ($newsroom_view_exec['view']->result as $row) {
          $created = $row->node_created > $created ? $row->node_created : $created;
        }

        $newsroom_boxes[] = array_merge($newsroom_view_exec, array(
          'title' => l($newsroom_grouping_term->name, $full_list_url),
          'list_link' => l(t('<span class="more">More</span> <span class="more_type">%1</span>', array('%1' => $newsroom_grouping_term->name)), $full_list_url, array('html' => TRUE)),
          'classes' => $classes,
          'highlight' => $topic_is_highlighted,
          'agenda' => FALSE,
          'last_update' => $created,
          'weight' => $newsroom_grouping_term->weight,
        ));
      }
    }
  }

  if (!empty($newsroom_boxes)) {
    return newsroom_render_boxes($newsroom_boxes);
  }
  else {
    return '';
  }
}

/**
 * Helper to check if topic is highlighted.
 *
 * @return bool
 *   is highlighted or not
 */
function _newsroom_type_is_highlighted($term) {
  if ($term === NEWSROOM_CALENDAR_BLOCK) {
    return FALSE;
  }
  $item_wrapper = entity_metadata_wrapper('taxonomy_term', $term);
  return $item_wrapper->__isset('field_newsroom_highlighted') ? $item_wrapper->field_newsroom_highlighted->value() : FALSE;
}

/**
 * Render the boxes for the block.
 *
 * @return string
 *   markup
 */
function newsroom_render_boxes($boxes) {
  $newsroom_content = '';
  $columns_newsroom = array(
    1 => array(
      'visible' => FALSE,
      'content' => ''),
    2 => array(
      'visible' => FALSE,
      'content' => ''),
  );
  $num_columns = variable_get('newsroom_summary_block_columns', 1);

  // Sort boxes based on configuration.
  uasort($boxes, '_newssroom_sort_newsroom_boxes');

  $newsroom_row_number = 1;
  foreach ($boxes as $box) {
    $active_column = 1;
    $box['classes'][] = 'newsroom_item_container';
    // Get active column.
    if ($num_columns == 2 && $newsroom_row_number % 2 == 0) {
      $active_column = 2;
    }

    $columns_newsroom[$active_column]['visible'] = TRUE;
    $columns_newsroom[$active_column]['content'] .= '<div class="' . implode(' ', $box['classes']) . '">'; /* add "highlighted" classname to display that block as highlighted (ie press releases, speeches) */
    $columns_newsroom[$active_column]['content'] .= '<h3 class="newsroom_title">' . $box['title'] . '</h3>';
    $columns_newsroom[$active_column]['content'] .= $box['block']['content'];
    $columns_newsroom[$active_column]['content'] .= '<div class="newsroom_more">' . $box['list_link'] . '</div>';
    $columns_newsroom[$active_column]['content'] .= "</div>";

    $newsroom_row_number++;
  }

  // 2 columns so display both.
  if ($columns_newsroom[2]['visible'] === TRUE) {
    $newsroom_content .= '<div class="nr_column_1 nr_column">' . $columns_newsroom[1]['content'] . '</div>';
    $newsroom_content .= '<div class="nr_column_2 nr_column">' . $columns_newsroom[2]['content'] . '</div>';
  }
  // 1 column only.
  else {
    $newsroom_content .= '<div class="nr_column_single">' . $columns_newsroom[1]['content'] . '</div>';
  }
  return $newsroom_content;
}

/**
 * Sort newsroom boxes.
 *
 * @param array $a
 *  Newsroom box.
 * @param array $b
 *  Newsroom box.
 *
 * @return bool
 *  Value
 */
function _newssroom_sort_newsroom_boxes($a, $b) {
  // Highligths at begining or end - based on setting.
  if ($a['highlight'] !== $b['highlight']) {
    return variable_get('newsroom_display_highlights_begin', 0) ? $a['highlight'] == FALSE : $a['highlight'] == TRUE;
  }
  // Sort Agenda before or after highlighted  - based on setting.
  if ($a['highlight'] && ($a['agenda'] !== $b['agenda'])) {
    return variable_get('newsroom_agenda_after_highlights', 0) ? $a['agenda'] == TRUE : $a['agenda'] == FALSE;
  }
  // Sort based on last update  - based on setting.
  if (variable_get('newsroom_order_by_last_update', 0)) {
    return $a['last_update'] < $b['last_update'];
  }
  else {
    return $a['weight'] > $b['weight'];
  }
}

/**
 * Fetch the contents of a newsroom box.
 *
 * @return array
 *   view
 */
function newsroom_fetch_content_view($view_arguments, $newsroom_grouping_term_name, $default_view_display, $sticky, $full_display, $topic_operator) {
  $view = views_get_view('newsroom_page_content');
  if (!is_object($view)) {
    return FALSE;
  }  
  
  $view->newsroom_display_type = FALSE;
  $view->newsroom_type_name = $newsroom_grouping_term_name === NEWSROOM_CALENDAR_BLOCK ? t('Calendar') : $newsroom_grouping_term_name->name;
  $view->set_arguments($view_arguments);
  $view->set_display($default_view_display);
  $view->sticky = $sticky;

  // Use topic operator from newsroom selection for topic context filter.
  $arguments_settings = $view->display[$view->current_display]->handler->get_option('arguments');
  if ($topic_operator != NEWSROOM_TOPIC_OPERATOR_OR && isset($arguments_settings['newsroom_term_node_tid_depth']['use_and'])) {
    $arguments_settings['newsroom_term_node_tid_depth']['use_and'] = 1;
    $view->display[$view->current_display]->handler->set_option('arguments', $arguments_settings);
  }

  $pager = $view->display_handler->get_option('pager');
  if ($full_display == TRUE) {
    $pager['type'] = 'full';
    $pager['options']['items_per_page'] = '15';
    $pager['options']['offset'] = '0';
    $pager['options']['id'] = '0';
  }
  elseif ($default_view_display !== 'agenda') {
    // Customizeable item number for non agenda displays.
    $variable_name = '';
    // Number of items per block.
    if (_newsroom_type_is_highlighted($newsroom_grouping_term_name)) {
      // Highlighted type, home | not home.
      $variable_name = $sticky ? 'newsroom_summary_home_block_num_highlighted_items' : 'newsroom_summary_block_num_highlighted_items';
    }
    else {
      // Not highlighted type, home | not home.
      $variable_name = $sticky ? 'newsroom_summary_home_block_num_items' : 'newsroom_summary_block_num_items';
    }

    $pager['options']['items_per_page'] = variable_get($variable_name, 3);
  }

  $view->display_handler->set_option('pager', $pager);
  return array('block' => $view->execute_display($default_view_display), 'view' => $view);
}

/**
 * Term ids of item types to be used in agenda.
 *
 * @return array
 *   tids
 */
function newsroom_agenda_types() {
  $newsroom_agenda_types = &drupal_static(__FUNCTION__);
  if (!isset($newsroom_agenda_types)) {
    if ($cache = cache_get('newsroom:agenda_types')) {
      $newsroom_agenda_types = $cache->data;
    }
    else {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'taxonomy_term')
          ->entityCondition('bundle', NEWSROOM_TYPE_VOCABULARY)
          ->fieldCondition('field_newsroom_type', 'value', array(
            'events',
            'consultation_funding',
            'agenda')
      );
      $result = $query->execute();
      $newsroom_agenda_types = isset($result['taxonomy_term']) ? $result['taxonomy_term'] : FALSE;
      cache_set('newsroom:agenda_types', $newsroom_agenda_types, 'cache_newsroom', time() + 360);
    }
  }
  return $newsroom_agenda_types;
}

/**
 * Merges a term_tid and its children into one array.
 *
 * @param int $term_tid
 *   Term id
 * @param int $term_vid
 *   Vid id
 *
 * @return array
 *   tids
 */
function newsroom_get_children($term_tid, $term_vid) {
  // We need parent ID also in the output array to use it in query.
  $parent_children_tids = array($term_tid);
  $children_tids = array_keys(taxonomy_get_children($term_tid, $term_vid));
  if (count($children_tids) > 0) {
    $parent_children_tids = array_merge($parent_children_tids, $children_tids);
  }
  return implode('+', $parent_children_tids);
}

/**
 * Returns the Newsroom title and link depending by taxonomy terms.
 *
 * @param int $delta
 *   The order
 *
 * @return string
 *   Subject
 */
function newsroom_subject($delta) {
  $newsroom_subject = l(t('Newsroom'), 'newsroom/all');
  if (!drupal_is_front_page()) {
    $topic_tid = menu_get_object('views_arg', 2);
    $topic_term = taxonomy_term_load($topic_tid);
    if (isset($topic_term->name)) {
      $newsroom_subject = l(t('Newsroom'), 'newsroom/all/' . $topic_term->tid . '');
    }
  }
  return $newsroom_subject;
}

/**
 * Implements hook_views_query_alter().
 */
function newsroom_views_query_alter(&$view, &$query) {
  if ($view->name === 'newsroom_page_content' && (!isset($view->sticky) || !$view->sticky)) {
    foreach ($query->where[1]['conditions'] as $key => $condition) {
      if ($condition['field'] == 'node.sticky') {
        unset($query->where[1]['conditions'][$key]);
      }
    }
  }
}

/**
 * Helper to provide an array with top terms for newsroom type vocabulary.
 *
 * @return array
 *   Top terms
 */
function newsroom_newsroom_type_top_terms() {
  $top_terms = array();
  $newsroom_type_vocabulary = taxonomy_vocabulary_machine_name_load(NEWSROOM_TYPE_VOCABULARY);
  $newsroom_type_terms = taxonomy_get_tree($newsroom_type_vocabulary->vid, 0, 1);
  foreach ($newsroom_type_terms as $newsroom_type_term) {
    $top_terms[] = $newsroom_type_term->tid;
  }
  return $top_terms;
}

/**
 * Implements hook_node_view().
 */
function newsroom_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'newsroom_item' && $view_mode == 'full') {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $type = $node_wrapper->field_newsroom_item_type->value();
    $type_wrapper = entity_metadata_wrapper('taxonomy_term', $type);

    // Redirect item if redirection is forced for this type.
    // Except for editors who can import items.
    if (!user_access('import newsroom feeds')) {
      // Only if we have a main link.
      if ($type && $node_wrapper->__isset('field_newsroom_item_main_link')) {
        if (_newsroom_item_type_teaser_only_settings($node_wrapper) == 'force') {
          $link = $node_wrapper->field_newsroom_item_main_link->value();
          drupal_goto($link['url'], array(), 301);
        }
      }
    }

    // Fetch menu context for item so we can have an active trail set for it.
    // Basically we try to find a menu item (node||term) that has the same Topic
    // associated than the NR item has as primary topic (or as normal topic).
    $path = FALSE;

    // Get primary topic if any.
    $primary_topics = $node_wrapper->field_primary_topic->value();
    if (!empty($primary_topics)) {
      $primary_topics = !is_array($primary_topics) ? array($primary_topics) : $primary_topics;
    }
    else {
      $primary_topics = array();
    }
    // Get regular topics.
    $topics = $node_wrapper->field_newsroom_topics->value();
    if (!empty($topics)) {
      $topics = !is_array($topics) ? array($topics) : $topics;
    }
    else {
      $topics = array();
    }

    $topics = array_merge($primary_topics, $topics);
    // Loop through topics (start with primary) to find menu item.
    foreach ($topics as $topic) {
      if ($path = _newsroom_fetch_active_menu($topic->tid)) {
        // Set menu item and stop the search.
        menu_tree_set_path('main-menu', $path);
        break;
      }
    }

    // Custom main link title per type.
    if ($type && $node_wrapper->__isset('field_newsroom_item_main_link')) {
      // Case there is a custom read more text set, change it.
      if ($type_wrapper->field_read_more_text->value()) {
        $node->content['field_newsroom_item_main_link'][0]['#element']['title'] = $type_wrapper->field_read_more_text->value();
      }
    }

    // Custom resposible person label per type.
    if ($type && $node_wrapper->__isset('field_newsroom_item_speaker')) {
      // Case there is a custom read more text set, change it.
      if ($type_wrapper->field_responsible_person_label->value()) {
        $node->content['field_newsroom_item_speaker']['#title'] = $type_wrapper->field_responsible_person_label->value();
      }
    }
  }
}

/**
 * Helper to retrieve a mlid for a given path.
 *
 * @param array $topic_ids
 *   Topic term ids.
 *
 * @return array
 *   Field data.
 */
function newsroom_get_topic_entities($topic_ids) {
  $topic_ids = is_array($topic_ids) ?  $topic_ids : array($topic_ids);

  $key = 'newsroom:get_topic_entities:' . md5(implode('', $topic_ids));
  $data = &drupal_static(__FUNCTION__);

  if (!isset($data)) {
    if ($cache = cache_get($key)) {
      $data = $cache->data;
    }
    else {
      $query = db_select('field_data_field_associated_newsroom_topic', 'f')
          ->fields('f')
          ->condition('f.field_associated_newsroom_topic_tid', $topic_ids)
          ->execute();
      $data = newsroom_pdo_to_array($query);

      cache_set($key, $data);
    }
  }
  return $data;
}

/**
 * Helper function to serialize PDO object into an array.
 */
function newsroom_pdo_to_array($query) {
  $data = array();
  if ($query) {
    while ($result = $query->fetchAssoc()) {
      $data[] = $result;
    }
  }

  return $data;
}

/**
 * Active menu for newsroom items.
 *
 * Returns wich menu item should be active for a newsroom item
 * based on the assigned topics.
 */
function _newsroom_fetch_active_menu($topic_id) {
  $path = FALSE;

  // Check if they are added to menu.
  $menu_items = array();
  // Fetch enities associated to topic using the special field.
  $topic_entities = newsroom_get_topic_entities($topic_id);

  if (count($topic_entities) > 0) {
    foreach ($topic_entities as $entity) {
      // Could use entity_uri() but we would have to load the full entity...
      $menu_link_items = newsroom_get_menu_by_path(str_replace('_', '/', $entity['entity_type']) . '/' . $entity['entity_id']);

      if ($menu_link_items !== FALSE) {
        foreach ($menu_link_items as $menu_item) {
          $menu_items[] = $menu_item;
        }
      }
    }
  }

  if (count($menu_items) > 0) {
    // Favor terms over nodes and lower entity ID in case we have multiple.
    usort($menu_items, function ($a, $b) {
      if ($a['router_path'] == 'taxonomy/term/%' && $b['router_path'] == 'node/%') {
        return -1;
      }
      elseif ($a['router_path'] == 'node/%' && $b['router_path'] == 'taxonomy/term/%') {
        return 1;
      }
      else {
        if ($a['plid'] == $b['plid']) {
          if ($a['weight'] == $b['weight']) {
            if ($a['mlid'] == $b['mlid']) {
              return 0;
            }
            else {
              return $a['mlid'] < $b['mlid'] ? -1 : 1;
            }
          }
          else {
            return $a['weight'] < $b['weight'] ? -1 : 1;
          }
        }
        else {
          return $a['plid'] < $b['plid'] ? -1 : 1;
        }
      }
    });

    $menu_item_link = array_shift($menu_items);
    $path = $menu_item_link['link_path'];
  }

  return $path;
}

/**
 * Finds a menu item for a given path.
 */
function newsroom_get_menu_by_path($path) {
  $key = 'newsroom:get_menu_by_path:' . md5($path);
  $data = &drupal_static(__FUNCTION__);
  if (!isset($data)) {
    if ($cache = cache_get($key)) {
      $data = $cache->data;
    }
    else {
      $query = db_select('menu_links', 'ml')
          ->fields('ml')
          ->condition('ml.link_path', $path)
          ->execute();
      $data = _newsroom_pdo_to_array($query);
      cache_set($key, $data);
    }
  }
  return $data;
}

/**
 * Convert the object to array to serialize it later.
 *
 * @param object $query
 *   Query object.
 *
 * @return array
 *   Array object.
 */
function _newsroom_pdo_to_array($query) {
  $data = array();
  if ($query) {
    while ($result = $query->fetchAssoc()) {
      $data[] = $result;
    }
  }

  return $data;
}

/**
 * Implements hook_permission().
 */
function newsroom_permission() {
  return array(
    'import newsroom feeds' => array(
      'title' => t('Import Newsroom feeds'),
    ),
    'edit remote newsroom item' => array(
      'title' => t('Edit newsroom item in Newsroom'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Create the redirect functionality for links from the NewsRoom.
 */
function newsroom_menu() {
  $items['news-redirect'] = array(
    'title' => 'Newsroom Item Redirect',
    'page callback' => 'newsroom_newsroom_item_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['news-topic-redirect'] = array(
    'title' => 'Newsroom Item Topic Redirect',
    'page callback' => 'newsroom_newsroom_item_topic_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['news-type-redirect'] = array(
    'title' => 'Newsroom Item Type Redirect',
    'page callback' => 'newsroom_newsroom_item_type_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['news-import'] = array(
    'title' => 'Newsroom Item Import',
    'page callback' => 'newsroom_newsroom_item_import',
    'access callback' => 'newsroom_newsroom_item_import_access',
    'type' => MENU_CALLBACK,
  );
  $items['news-delete'] = array(
    'title' => 'Newsroom Item Delete',
    'page callback' => 'newsroom_newsroom_item_delete',
    'access callback' => 'newsroom_newsroom_item_import_access',
    'type' => MENU_CALLBACK,
  );
  $items['news-dispatcher'] = array(
    'title' => 'Newsroom Item Redirect',
    'page callback' => 'newsroom_newsroom_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Controls access to page based on IP (newsroom server) and role.
 */
function newsroom_newsroom_item_import_access() {
  $allowed_ips = array_map('trim', explode(',', variable_get('newsroom_allowed_ips')));
  return user_access('import newsroom feeds') ? TRUE : in_array(ip_address(), $allowed_ips);
}

/**
 * Imports or deletes a single news item based on the original newsroom ID.
 */
function newsroom_newsroom_item_importer($newsroom_id = 0, $delete = FALSE, $reimport = FALSE) {
  if ($newsroom_id == 0) {
    drupal_not_found();
  }
  else {
    if ($delete) {
      $newsroom_item = _newsroom_get_newsroom_item_by_id($newsroom_id);
      if ($newsroom_item) {
        $nids_to_delete = array_keys($newsroom_item);
        node_delete_multiple($nids_to_delete);
        $message = t('Newsroom Item nid: %1 deleted', array('%1' => implode(', ', $nids_to_delete)));
        watchdog('newsroom', $message);
        drupal_set_message($message);
        return '';
      }
      else {
        drupal_not_found();
        drupal_exit();
      }
    }
    else {
      global $_newsroom_universe_url;
      $source = feeds_source('newsroom_items');
      $config = $source->getConfig();
      // @TODO deal with the case if we don't have an item setup.
      $additional_config = array(
        'FeedsHTTPFetcher' => array(
          'source' => $_newsroom_universe_url .
          variable_get('newsroom_single_item_import_segment', 'fullrss.cfm?item_id=') .
          $newsroom_id,
        ),
      );
      $source->setConfig(array_merge($config, $additional_config));
      // Make sure we force the import of the item.
      $processor_config = $source->importer->processor->getConfig();
      $source->importer->processor->setConfig(array_merge($processor_config, $additional_config));
      $source->import();
      $source->delete();

      $path = 'news-redirect/' . $newsroom_id;
      if ($reimport) {
        drupal_goto($path);
      }
      return l(t('Go to Newsroom Item'), $path);
    }
  }
}

/**
 * Get newsroom item by Id.
 */
function _newsroom_get_newsroom_item_by_id($newsroom_id = 0) {
  $newsroom_data = &drupal_static(__FUNCTION__);
  $key = 'newsroom:newsroom_item_by_id:' . $newsroom_id;
  if (!isset($taxonomy_terms)) {
    if ($cache = cache_get($key)) {
      $taxonomy_terms = $cache->data;
    }
    else {
      $query = new EntityFieldQuery();
      $newsroom_item = $query
        ->entityCondition('entity_type', 'node')
        ->fieldCondition('field_newsroom_item_id', 'value', $newsroom_id, '=')
        ->execute();
      $newsroom_data = isset($newsroom_item['node']) ? $newsroom_item['node'] : FALSE;
      cache_set($key, $newsroom_data, 'cache_newsroom', time() + 360);
    }
  }
  return $newsroom_data;
}

/**
 * Shortcut to delete a Newsroom Item.
 */
function newsroom_newsroom_item_delete($newsroom_id = 0) {
  return newsroom_newsroom_item_importer($newsroom_id, TRUE);
}

/**
 * Shortcut to delete a Newsroom Item.
 */
function newsroom_newsroom_item_import($newsroom_id = 0, $reimport = NULL) {
  return newsroom_newsroom_item_importer($newsroom_id, FALSE, $reimport == 'reimport');
}

/**
 * Redirects to the Newsroom Item. With the Original Newsroom ID.
 */
function newsroom_newsroom_item_redirect($newsroom_id = 0) {
  return newsroom_newsroom_redirect('item', $newsroom_id);
}

/**
 * Redirects to the Newsroom Item Topic. With the Original Newsroom Topic ID.
 */
function newsroom_newsroom_item_topic_redirect($topic_id = 0) {
  return newsroom_newsroom_redirect('topic', $topic_id);
}

/**
 * Redirects to the Newsroom Item Type. With the Original Newsroom Type ID.
 */
function newsroom_newsroom_item_type_redirect($type_id = 0) {
  return newsroom_newsroom_redirect('type', $type_id);
}

/**
 * Redirects to the Newsroom Item with the Original Newsroom ID.
 */
function newsroom_newsroom_redirect($redirect_type = 'item', $param_1 = 0, $param_2 = 0) {
  if (!$param_1) {
    drupal_not_found();
  }
  
  module_load_include('inc', 'pathauto', 'pathauto');

  $path = FALSE;
  switch ($redirect_type) {
    // Newsroom Article based on original newsroom ID.
    case 'item':
      $item = _newsroom_get_newsroom_item_by_id($param_1);
      if (!empty($item)) {
        $item = array_shift($item);
        $path = 'node/' . $item->nid;
      }
      break;

    // Newsroom Item Type based on original import name.
    case 'type':
      $type = newsroom_technical_fields_to_tid('field_newsroom_type_id', $param_1);
      if ($type) {
        $type_term = taxonomy_term_load($type[0]);
        $path = 'newsroom/' . pathauto_cleanstring($type_term->name);;
      }
      break;

    // Newsroom Chapter based on original newsroom topic ID.
    case 'topic':
      $topic = newsroom_technical_fields_to_tid('field_newsroom_topic_id', $param_1);
      if ($topic) {
        $topic_term = taxonomy_term_load($topic[0]);
        $path = 'newsroom/all/' . pathauto_cleanstring($topic_term->name);
      }
      break;

    // Newsroom type and topic.
    case 'topic-type':
      $topic = newsroom_technical_fields_to_tid('field_newsroom_topic_id', $param_1);
      $type = newsroom_technical_fields_to_tid('field_newsroom_type_id', $param_2);
      if ($topic && $type) {
        $type_term = taxonomy_term_load($type[0]);
        $topic_term = taxonomy_term_load($topic[0]);
        $path = 'newsroom/' . pathauto_cleanstring($type_term->name) . '/' . pathauto_cleanstring($topic_term->name);
      }
      break;
  }

  if ($path) {
    drupal_goto($path);
  }
  else {
    drupal_not_found();
  }
}

/**
 * Implements pre_render_hook().
 */
function newsroom_views_pre_render(&$view) {
  
  // Mark items as new if a user did't see it before.
  if ($view->name == 'newsroom_page_content') {
    foreach ($view->result as $key => $result) {
      if (empty(node_last_viewed($result->nid))) {
        $new_title = empty($result->field_field_newsroom_item_short_title[0]['rendered']['#markup']) ? $result->node_title : $result->field_field_newsroom_item_short_title[0]['rendered']['#markup'];
        $view->result[$key]->field_field_newsroom_item_short_title[0]['rendered']['#markup'] = '<span class="itemFlag flagHot newItem">' . t('New') . '</span> ' . $new_title;
      }
    }
  }

  if ($view->name == 'newsroom') {
    
    // Replace [newsroom_url_prefix] for view area to site prefix 
    // for example 'digital-agenda'.
    $areas = array('header', 'footer', 'empty');
    foreach ($areas as $area) {
      if (isset($view->$area)) {
        $area_item = $view->$area;
        foreach ($area_item as $key => $value) {
          if (isset($area_item[$key]->options['content'])) {
            $area_item[$key]->options['content'] = str_replace('[newsroom_url_prefix]', variable_get('newsroom_url_prefix', ''), $area_item[$key]->options['content']);
          }
        }
        $view->$area = $area_item;
      }
    }

    if (in_array($view->current_display, array('previous_events', 'previous_consultation_funding'))) {
      $view->build_info['title'] = str_replace('<span class="filter_type">', '<span class="filter_type">' . t('Past') . ' ', $view->build_info['title']);
    }
    // If there is more than one parameter.
    if (count(explode(' ', $view->build_info['substitutions']['!1']) > 1)) {
      $view->build_info['substitutions']['%1'] = str_replace(' + ', ' & ', $view->build_info['substitutions']['%1']);
    }
    
    if ($view->build_info['substitutions']['!2'] == 'all') {
      if (isset($view->footer['area_text_custom'])) {
        $view->footer['area_text_custom']->options['content'] = str_replace('about %2', '', $view->footer['area_text_custom']->options['content']);
      }
    }
    else {
      $view->build_info['title'] = str_replace('<span class="filter_topic">', '<span class="filter_topic">' . t('about') . ' ', $view->build_info['title']);
      if (count(explode(' ', $view->build_info['substitutions']['!2']) > 1)) {
        $view->build_info['substitutions']['%2'] = str_replace(' + ', ' & ', $view->build_info['substitutions']['%2']);
      }
    }

    if ($view->build_info['substitutions']['%1'] == '' && $view->build_info['substitutions']['%2'] == '' || $view->build_info['substitutions']['%1'] == '' && $view->build_info['substitutions']['%2'] == 'all') {
      $view->build_info['title'] = isset($view->display[$view->current_display]->display_options['title']) ? $view->display[$view->current_display]->display_options['title'] : $view->display['default']->display_options['title'];
    }

    // Iclude rendered entity from settings.
    if (isset($view->header['entity']) && isset($view->header['entity']->options['ui_name']) && $view->header['entity']->options['ui_name'] == 'embedded_node') {
      $patterns = trim(variable_get('newsroom_embedded_node_patterns', ''));
      $patterns = explode("\n", $patterns);
      foreach ($patterns as $pattern) {
        $pattern = explode('|', trim($pattern));
        // Verify pattern format.
        if (count($pattern) == 3) {
          // Check for a match with current arguments.
          if ($pattern[0] == $view->args[0] && $pattern[1] == $view->args[1] && is_numeric($pattern[2])) {
            $view->header['entity']->options['entity_id'] = $pattern[2];
            break;
          }
        }
      }
    }

    // Inculde Featured item per type only on first page.
    if (isset($view->header['view']) && isset($view->header['view']->options['ui_name']) && $view->header['view']->options['ui_name'] == 'featured') {
      $page = isset($_GET['page']) ? $_GET['page'] : NULL;
      if (!empty($page)) {
        unset($view->header['view']);
      }
    }
  }
}

/**
 * Preview view hook.
 *
 * @param array $view
 *   view entity
 * @param int $display_id
 *   Display Id
 * @param array $args
 *   Arguments
 */
function newsroom_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name == 'newsroom') {
    module_load_include('inc', 'pathauto', 'pathauto');

    $arguments_settings = $view->display[$view->current_display]->handler->get_option('arguments');
    // Select the appropriate display in case only one type is set.
    if ($display_id == 'default_newsroom' && isset($args[0]) && $args[0] !== $arguments_settings['term_node_tid_depth']['default_argument_options']['argument']) {
      $display_field = 'default';
      
      $is_previous = isset($args[2]) && $args[2] == 'previous';
      
      // Convert topic url part to taxonomy term id
      // and assign to arguments, because we use 'tids' validation.
      if (isset($args[1]) && !empty($args[1])) {
        $topic = newsroom_taxonomy_term_from_request($args[1], $arguments_settings, 'term_node_tid_depth_1');
        if ($topic) {
          $args[1] = $topic->tid;
        }
      }

      $types = explode(' ', $args[0]);
      if (count($types) == 1) {
        // Convert type or topic url part to taxonomy term id
        // and assign to arguments, because we use 'tids' validation.
        $type = newsroom_taxonomy_term_from_request($types[0], $arguments_settings, 'term_node_tid_depth');
        
        if ($type) {
          $type = is_array($type) ? array_shift($type) : $type;
          // Take children types IDs and use them as argument
          // because we need to make search in children types also.
          $args[0] = newsroom_get_children($type->tid, $type->vid);

          $wrapper = entity_metadata_wrapper('taxonomy_term', $type);
          if ($wrapper->__isset('field_newsroom_type')) {
            $display_field = $wrapper->field_newsroom_type->value();
          }
        }

        switch ($display_field) {
          case 'events':
            $display = $is_previous ? 'previous_events' : 'events';
            break;

          case 'consultation_funding':
            $display = $is_previous ? 'previous_consultation_funding' : 'consultation_funding';
            break;

          default:
            $display = 'default_newsroom';
            break;
        }
        $view->set_display($display);
      }
    }
  }

  if ($view->name == 'newsroom_navigation') {
    $display = variable_get('newsroom_block_by', 'type');
    $router = menu_get_item();
    // Custom display for calendar pages.
    if (isset($router['path']) && $router['path'] == 'newsroom/calendar') {
      $display .= '_for_calendar';
    }
    $view->set_display($display);

    // Rewrite navigation urls from term name to tid if set.
    $newsroom_url_mode = variable_get('newsroom_url_mode', 'name');
    if ($newsroom_url_mode == 'tid') {
      $field_settings = $view->display[$view->current_display]->handler->get_option('fields');
      foreach ($field_settings as &$field_setting) {
        if (!empty($field_setting['alter']['path'])) {
          $field_setting['alter']['path'] = str_replace('[name]', '[tid]', $field_setting['alter']['path']);
        }
      }
      $view->display[$view->current_display]->handler->set_option('fields', $field_settings);
    }
  }
}

/**
 * Try to get taxonomy term 
 * @param type $request
 * @param type $argument_settings
 */
function newsroom_taxonomy_term_from_request($request, $argument_settings, $filter_field) {
  // Try to get simple way, suppose it is the ID or name.
  $taxonomy_term = is_numeric($request) ? taxonomy_term_load($request) : taxonomy_get_term_by_name(str_replace('-', ' ', $request), NEWSROOM_TYPE_VOCABULARY);

  // Try to convert to autopath value and compare with available terms.
  if (!$taxonomy_term) {
    // Take vocabularies from context filter field.
    $vocabularies = isset($argument_settings[$filter_field]['validate_options']['vocabularies']) ? array_values($argument_settings[$filter_field]['validate_options']['vocabularies']) : array();
    if (count($vocabularies) > 0) {
      $taxonomy_terms = newsroom_get_term_from_vocabularies($vocabularies);
      // Compare taxonomy terms modified by pathauto with the current value
      // from the URL.
      if ($taxonomy_terms) {
        foreach($taxonomy_terms as $term_item) {
          if (pathauto_cleanstring($term_item['name']) == $request) {
            $taxonomy_term = taxonomy_term_load($term_item['tid']);
            break;
          }
        }
      }
    }
  }

  return $taxonomy_term;
}

/**
 * Term ids of item types to be used in agenda.
 *
 * @return array
 *   tids
 */
function newsroom_get_term_from_vocabularies($vocabularies = array()) {
  $taxonomy_terms = &drupal_static(__FUNCTION__);
  $key = 'newsroom:vocabulary_terms:' . md5(implode('', $vocabularies));
  if (!isset($taxonomy_terms)) {
    if ($cache = cache_get($key)) {
      $taxonomy_terms = $cache->data;
    }
    else {
      $query = db_select('taxonomy_term_data', 'td');
      $query->leftJoin('taxonomy_vocabulary', 'tv', 'td.vid = tv.vid');
      $query->fields('td');
      $query->fields('tv', array('machine_name'));
      $query->condition('tv.machine_name', $vocabularies);
      $taxonomy_terms = newsroom_pdo_to_array($query->execute());
      cache_set($key, $taxonomy_terms, 'cache_newsroom', time() + 360);
    }
  }
  return $taxonomy_terms;
}

/**
 * Implements hook_date_format_types().
 */
function newsroom_date_format_types() {
  return array(
    'date_only' => t('Date only'),
  );
}

/**
 * Implements hook_date_formats().
 */
function newsroom_date_formats() {
  return array(
    array(
      'type' => 'date_only',
      'format' => 'd/m/Y',
      'locales' => array(),
    ),
  );
}

/**
 * Converts an option array from tid based to name based.
 *
 * @return array
 *   List of options.
 */
function _newsroom_options_tid_to_name($options) {
  $options_names = array();
  foreach ($options as $option) {
    $options_names[drupal_strtolower(str_replace(' ', '-', trim($option, ' -')))] = $option;
  }
  return $options_names;
}

/**
 * Implements hook_theme().
 */
function newsroom_theme($existing, $type, $theme, $path) {
  return array(
    'newsroom_agenda' => array(
      'file' => 'theme.inc',
      'path' => $path . '/theme',
    ),
    'newsroom_agenda_date' => array(
      'file' => 'theme.inc',
      'path' => $path . '/theme',
    ),
  );
}

/**
 * Implements hook_preprocess_views_viewnewsroom_preprocess_views_view().
 */
function newsroom_preprocess_views_view(&$vars) {

  if ($vars['view']->name !== 'newsroom_page_content' || $vars['view']->current_display !== 'agenda') {
    return;
  }

  $agenda = newsroom_prepare_agenda($vars['view']);

  if ($agenda) {
    $vars['rows'] = theme('newsroom_agenda', $agenda);
  }
}

/**
 * Build a render array representing the events.
 *
 * @param object $view
 *   The view object.
 *
 * @return array
 *   A render array of events.
 */
function newsroom_prepare_agenda($view) {
  if (empty($view->result)) {
    return;
  }
  $today = date('Y-m-d', time());
  $events = array();
  $renderer = $view->style_plugin->row_plugin;
  foreach ($view->result as $delta => $row) {
    // Render row to be able to use views for formatting the fields.
    $view->row_index = $delta;
    $rendered_row = $renderer->render($row);

    // Collect all fields for the customize options.
    $fields = array();
    // Collect only date fields.
    $date_fields = array();
    foreach ($view->field as $field_name => $field) {
      $fields[$field_name] = $view->style_plugin->get_field($delta, $field_name);
      if (fullcalendar_field_is_date($field)) {
        $date_fields[$field_name] = array(
          'value' => $field->get_items($row),
          'field_alias' => $field->field_alias,
          'field_name' => $field->field_info['field_name'],
          'field_info' => $field->field_info,
        );
      }
    }

    // TODO: $options variable doesn't have value. To be removed!
    // If using a custom date field, filter the fields to process.
    if (!empty($options['date'])) {
      $date_fields = array_intersect_key($date_fields, $options['date_field']);
    }

    // If there are no date fields (gcal only), return.
    if (empty($date_fields)) {
      return $events;
    }

    // This should never happen, but just in case.
    if (!isset($row->_field_data)) {
      return $events;
    }

    $entities = array();
    $event = array();
    foreach ($date_fields as $field) {
      // If this row doesn't contain this entity, or if this entity has already
      // been processed, skip it.
      if (!isset($row->_field_data[$field['field_alias']])) {
        continue;
      }

      if (!isset($entities[$field['field_alias']])) {
        // Find the field's alias that refers to it's entity.
        $alias = $field['field_alias'];
        $entity = $row->_field_data[$alias]['entity'];
        $entity->entity_type = $row->_field_data[$alias]['entity_type'];

        list(,, $bundle) = entity_extract_ids($entity->entity_type, $entity);
        $entity->bundle = $bundle;
        $entity->eid = $row->{$alias};
        $entity->options = $view->style_options;

        // Store the current date field name for later.
        $entity->agenda_date_field = $field['field_name'];

        // Default URL.
        $uri = entity_uri($entity->entity_type, $entity);
        $entity->url = isset($uri['path']) ? $uri['path'] : '';
        // Fetch custom URL if needed.
        if (!empty($options['url'])) {
          $field_name = $options['url_field'];
          if (!empty($fields[$field_name])) {
            $entity->url = ltrim($fields[$field_name], '/');
          }
        }

        // Fetch custom title if needed.
        if (!isset($entity->title)) {
          $entity->title = '';
        }
        if (!empty($options['title'])) {
          $field_name = $options['title_field'];
          if (!empty($fields[$field_name])) {
            $entity->title = $fields[$field_name];
          }
        }

        $entities[$alias] = $entity;
      }

      $entity = $entities[$field['field_alias']];
      // Filter fields without value.
      if (!empty($field['value'])) {
        $instance = field_info_instance($entity->entity_type, $field['field_name'], $bundle);
        foreach ($field['value'] as $index => $item) {
          $classes = 'views-row clearfix';
          $dates = _newsroom_process_dates($instance, $entity, $field['field_info'], $item['raw']);
          if (empty($dates)) {
            continue;
          }
          list($start, $end, $all_day, $single_day, $length) = $dates;

          $item_wrapper = entity_metadata_wrapper('node', $entity);
          $type = $item_wrapper->field_newsroom_item_type->raw();

          $classes .= ' type-' . $type;
          $classes .= $single_day ? ' single-day' : '';
          $classes .= date('Y-m-d', strtotime($start)) == $today ? ' starts' : '';
          $classes .= date('Y-m-d', strtotime($end)) == $today ? ' ends' : '';

          $event = array(
            '#type' => 'markup',
            '#markup' => $rendered_row,
            '#prefix' => '<div class="' . $classes . '">',
            '#suffix' => '</div>',
            'attributes' => array(
              'allDay' => $all_day,
              'singleDay' => $single_day,
              'start' => $start,
              'end' => $end,
              'length' => $length,
              'field' => $field['field_name'],
              'index' => $index,
            ),
          );
          // Duplicate records for each day in case it is multiple day event.
          $date = date('Y-m-d', strtotime($start));
          while (strtotime($date) <= strtotime($end)) {
            $events[$date][] = $event;
            $date = date('Y-m-d', strtotime('+1 day', strtotime($date)));
          }
        }
      }
    }
  }
  ksort($events);
  return $events;
}

/**
 * Process the dates, format them, and determine if it is all day.
 *
 * @param array $instance
 *   The field instance.
 * @param object $entity
 *   The entity object
 * @param array $field
 *   The field info.
 * @param array $item
 *   The date item.
 *
 * @return array
 *   A numerically indexed array containing these elements:
 *   - 0: The start date object.
 *   - 1: The end date object.
 *   - 2: A Boolean representing whether the date is all day.
 */
function _newsroom_process_dates($instance, $entity, $field, $item) {
  if (isset($item['db']['value'])) {
    $date1 = $item['db']['value'];
    date_timezone_set($date1, timezone_open($item['timezone']));
    $date2 = $item['db']['value2'];
    date_timezone_set($date2, timezone_open($item['timezone']));
  }
  else {
    $date = date_formatter_process($instance['display']['default']['type'], $entity->entity_type, $entity, $field, $instance, LANGUAGE_NONE, $item, $instance['display']['default']);
    if (empty($date['value']['local']['object'])) {
      return;
    }

    $date1 = $date['value']['local']['object'];
    $date2 = $date['value2']['local']['object'];
  }

  // Allow modules to alter the date objects.
  $start = $date1->format(DATE_FORMAT_DATETIME);
  $end = $date2->format(DATE_FORMAT_DATETIME);
  $all_day = _newsroom_date_all_day_field($field, $instance, $date1, $date2);
  $single_day = date('Y-m-d', strtotime($start)) == date('Y-m-d', strtotime($end));
  // Lenght of event in days.
  $length = (int) floor((strtotime($end) - strtotime($start)) / (60 * 60 * 24)) + 1;
  return array($start, $end, $all_day, $single_day, $length);
}

/**
 * Provide a wrapper around the deprecated date_field_all_day().
 *
 * @see date_all_day_field()
 * @see date_field_all_day()
 */
function _newsroom_date_all_day_field($field, $instance, $date1, $date2 = NULL) {
  // Try the old function first since it is more likely to be available.
  if (function_exists('date_field_all_day')) {
    return date_field_all_day($field, $instance, $date1, $date2);
  }

  // Now try the new function.
  if (function_exists('date_all_day_field')) {
    return date_all_day_field($field, $instance, $date1, $date2);
  }

  // This means the old function has been removed, and they haven't enabled the
  // new module yet. All day events will be displayed as not all day.
  watchdog('newsroom', 'All day events will not function correctly until the Date All Day module is enabled.', array(), WATCHDOG_NOTICE);
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function newsroom_field_formatter_info() {
  return array(
    'newsroom_main_link' => array(
      'label' => t('Newsroom Main Link'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function newsroom_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  if ($display['type'] == 'newsroom_main_link') {
    $element['display_type'] = array(
      '#title' => t('Type of display context'),
      '#type' => 'select',
      '#options' => array(
        'default' => t('Default'),
        'title' => t('Title only'),
        'teaser' => t('Teaser also displayed'),
      ),
      '#default_value' => $settings['display_type'],
    );
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function newsroom_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  if ($display['type'] == 'newsroom_main_link') {
    if ($display['settings']['display_type']) {
      $options = array(
        'default' => t('Default'),
        'title' => t('Title only'),
        'teaser' => t('Teaser also displayed'),
      );

      return $options[$display['settings']['display_type']];
    }
    else {
      return t('Default');
    }
  }
  return '';
}

/**
 * Implements hook_field_formatter_view().
 */
function newsroom_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    if (!empty($item['url'])) {
      if ($entity_type == 'node' && $entity->type == 'newsroom_item') {
        $main_link_url = $item['url'];

        // Link to newsroom item by default.
        $item['url'] = 'node/' . $entity->nid;

        // If item is Teaser only.
        $wrapper = entity_metadata_wrapper('node', $entity);
        if ($wrapper->field_newsroom_teaser_only->value()) {
          switch (_newsroom_item_type_teaser_only_settings($wrapper)) {
            case 'always':
            case 'force':
              $item['url'] = $main_link_url;
              break;

            case 'from_teaser':
              if ($display['settings']['display_type'] == 'teaser') {
                $item['url'] = $main_link_url;
              }
              break;
          }
        }
      }

      $elements[$delta] = array(
        '#theme' => 'link_formatter_link_absolute',
        '#element' => $item,
        '#field' => $instance,
        '#display' => $display,
      );
    }
  }
  return $elements;
}

/**
 * Returns the Click-through setting for a given item.
 *
 * @param EntityMetadataWrapper $node_wrapper
 *   Newsroom Item node wrapper.
 *
 * @return string
 *   Value of the Click-through field of the item type.
 */
function _newsroom_item_type_teaser_only_settings($node_wrapper) {
  $type = $node_wrapper->field_newsroom_item_type->value();
  $type_wrapper = entity_metadata_wrapper('taxonomy_term', $type);
  return $type_wrapper->field_direct_link_if_teaser_only->value();
}

/**
 * Validate if a given Newsroom Universe exists.
 *
 * @param string $universe_id
 *   Newsroom Universe ID
 *
 * @return bool
 *   Newsroom Universe exists or not.
 */
function _newsroom_validate_universe($universe_id = NULL) {
  if ($universe_id) {
    // logout.cfm is used because it is always available if a universe exists.
    $test = chr_curl_http_request(NEWSROOM_URL . $universe_id . '/logout.cfm');
    return $test->code == 200;
  }

  return FALSE;
}

/**
 * Create default set of importers.
 */
function _newsroom_create_default_importers($universe_url, $context = 'admin', $redirect = NULL) {
  $importers = array(
    'newsroom_type_importer' => array(
      'segment' => 'rss-item-type.cfm',
      'importer' => 'newsroom_type',
    ),
    'newsroom_service_importer' => array(
      'segment' => 'rss-service.cfm',
      'importer' => 'newsroom_services',
    ),
    'newsroom_topic_importer' => array(
      'segment' => 'rss-service.cfm',
      'importer' => 'newsroom_topics',
    ),
    'newsroom_delete_item_importer' => array(
      'segment' => 'fullrss-unpublished.cfm',
      'importer' => 'newsroom_deleted_items',
    ),
    'newsroom_delete_item_importer' => array(
      'segment' => 'fullrss-deleted.cfm',
      'importer' => 'newsroom_unpublished_items',
    ),
    'newsroom_item_importer' => array(
      'segment' => 'fullrss.cfm',
      'importer' => 'newsroom_items',
    ),
  );

  foreach ($importers as $importer) {
    $feed_source = feeds_source($importer['importer']);
    $config = $feed_source->getConfig();
    $config['FeedsHTTPFetcher']['source'] = $universe_url . '/' . $importer['segment'];
    $feed_source->setConfig($config);
    $feed_source->save();
    $batch = array(
      'title' => t('Importing !title', array('!title' => $importer['importer'])),
      'operations' => array(
        array('feeds_batch', array('import', $importer['importer'], 0)),
      ),
      'progress_message' => t('Current: @current | Remaining:
      @remaining | Total: @total | Percentage: @percentage | Estimate:
      @estimate | Elapsed: @elapsed'),
    );
    $batch['progressive'] = FALSE;
    batch_set($batch);
  }
  if ($context == 'drush') {
    drush_print(dt('Importing items, this might take a while...'));
    drush_backend_batch_process();
  }
}

/**
 * Implements hook_views_data_alter().
 */
function newsroom_views_data_alter(&$data) {
  if (isset($data['taxonomy_term_data']['name']['field'])) {
    $data['taxonomy_term_data']['name']['field']['handler'] = 'newsroom_views_handler_field_taxonomy';
  }
  
  $data['node']['newsroom_term_node_tid_depth'] = array(
    'help' => t('Display content if it has the selected taxonomy terms, or children of the selected terms. Due to additional complexity, this has fewer options than the versions without depth.'),
    'real field' => 'nid',
    'argument' => array(
      'title' => t('Newsroom: Has taxonomy term ID (with depth)'),
      'handler' => 'newsroom_handler_argument_term_node_tid_depth',
      'accept depth modifier' => TRUE,
    ),
  );
}

/**
 * Implements hook_module_implements_alter().
 */
function newsroom_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'views_plugins') {
    $group = $implementations['newsroom'];
    unset($implementations['newsroom']);
    $implementations['newsroom'] = $group;
  }
}

/**
 * Implements of hook_views_api().
 */
function newsroom_views_api() {
  return array(
    'api' => 3.0
  );
}

